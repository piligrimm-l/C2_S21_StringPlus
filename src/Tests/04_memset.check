#suite s21_memset_suite

#tcase case_s21_memset
#test memset_basic_fill
// что каждый байт в буфере равен этому символу после заполнения.
  char buffer[10];
  s21_memset(buffer, 'A', sizeof(buffer));
  for (size_t i = 0; i < sizeof(buffer); i++) {
    ck_assert_msg(buffer[i] == 'A', "Buffer[%zu] != 'A'", i);
  }

#test memset_zero_length 
// Проверяет, что содержимое буфера не изменяется, если указано заполнить 0 байтов.
  char buffer[10] = "1234567890";
  s21_memset(buffer, 'A', 0);
  ck_assert_mem_eq(buffer, "1234567890", sizeof(buffer));

#test memset_partial_fill
// что функция правильно обрабатывает указанное количество байтов для заполнения.
  char buffer[10] = "1234567890";
  s21_memset(buffer, 'B', 5);
  ck_assert_mem_eq(buffer, "BBBBB67890", sizeof(buffer));

#test memset_various_chars
// функция универсально применяет любой символ в качестве аргумента для заполнения.
  char buffer[5];
  s21_memset(buffer, '\0', sizeof(buffer));
  for (size_t i = 0; i < sizeof(buffer); i++) {
    ck_assert_msg(buffer[i] == '\0', "Buffer[%zu] != '\\0'", i);
  }
  s21_memset(buffer, 'Z', sizeof(buffer));
  for (size_t i = 0; i < sizeof(buffer); i++) {
    ck_assert_msg(buffer[i] == 'Z', "Buffer[%zu] != 'Z'", i);
  }

#test memset_large_buffer
//  корректно заполнять большие буферы без ошибок и утечек памяти.
  size_t size = 1024;  // Используем меньший размер для экономии памяти
  char *buffer = (char *)malloc(size);
  memset(buffer, 'C', size);
  for (size_t i = 0; i < size; i++) {
    ck_assert_msg(buffer[i] == 'C', "Buffer[%zu] != 'C'", i);
  }
  free(buffer);


